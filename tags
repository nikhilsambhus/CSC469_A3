!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	md5.h	/^		unsigned int A, B, C, D; \/* registers *\/$/;"	m	struct:md5_ctx::__anon9
ALL_EXE	Makefile	/^ALL_EXE = $(foreach t, $(TARGETS), $($t_EXE))$/;"	m
ALL_OBJ	Makefile	/^ALL_OBJ = $(foreach t, $(TARGETS), $($t_OBJ))$/;"	m
B	md5.h	/^		unsigned int A, B, C, D; \/* registers *\/$/;"	m	struct:md5_ctx::__anon9
C	md5.h	/^		unsigned int A, B, C, D; \/* registers *\/$/;"	m	struct:md5_ctx::__anon9
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall -Wextra -std=gnu99$/;"	m
CLEAN_DIRS	Makefile	/^CLEAN_DIRS = util util\/collections$/;"	m
CLEAN_FILES	Makefile	/^CLEAN_FILES = *.log$/;"	m
CLIENT_EXE	Makefile	/^CLIENT_EXE = client$/;"	m
CLIENT_SRC	Makefile	/^CLIENT_SRC = client.c md5.c util.c$/;"	m
CTRLREQ_FAILURE	defs.h	/^	CTRLREQ_FAILURE,$/;"	e	enum:__anon6
CTRLREQ_SUCCESS	defs.h	/^	CTRLREQ_SUCCESS,$/;"	e	enum:__anon6
D	md5.h	/^		unsigned int A, B, C, D; \/* registers *\/$/;"	m	struct:md5_ctx::__anon9
F	md5.h	50;"	d
FF	md5.h	58;"	d
G	md5.h	51;"	d
GET_UINT32	md5.c	49;"	d	file:
GG	md5.h	59;"	d
H	md5.h	52;"	d
HDR_MAGIC	defs.h	73;"	d
HEARTBEAT	defs.h	/^	HEARTBEAT,\/\/ for failure detection$/;"	e	enum:__anon4
HH	md5.h	60;"	d
I	md5.h	53;"	d
II	md5.h	61;"	d
KEY_NOT_FOUND	defs.h	/^	KEY_NOT_FOUND,$/;"	e	enum:__anon3
KEY_SIZE	defs.h	88;"	d
LDFLAGS	Makefile	/^LDFLAGS = -pthread -lrt$/;"	m
MAX_CLIENT_SESSIONS	mserver.c	97;"	d	file:
MAX_CLIENT_SESSIONS	server.c	104;"	d	file:
MAX_MSG_LEN	defs.h	76;"	d
MAX_SERVER_SESSIONS	server.c	108;"	d	file:
MAX_STR_LEN	client.c	95;"	d	file:
MD5_BUFFER	md5.h	47;"	d
MD5_H	md5.h	25;"	d
MD5_PADDING	md5.c	/^static unsigned char MD5_PADDING [64] = { \/* 512 Bits *\/$/;"	v	file:
MSERVER_CTRLREQ_TYPE_MAX	defs.h	/^	MSERVER_CTRLREQ_TYPE_MAX$/;"	e	enum:__anon4
MSERVER_EXE	Makefile	/^MSERVER_EXE = mserver$/;"	m
MSERVER_SRC	Makefile	/^MSERVER_SRC = mserver.c util.c$/;"	m
MSG_LOCATE_REQ	defs.h	/^	MSG_LOCATE_REQ,$/;"	e	enum:__anon1
MSG_LOCATE_RESP	defs.h	/^	MSG_LOCATE_RESP,$/;"	e	enum:__anon1
MSG_MSERVER_CTRL_REQ	defs.h	/^	MSG_MSERVER_CTRL_REQ,$/;"	e	enum:__anon1
MSG_NONE	defs.h	/^	MSG_NONE = 0,$/;"	e	enum:__anon1
MSG_OPERATION_REQ	defs.h	/^	MSG_OPERATION_REQ,$/;"	e	enum:__anon1
MSG_OPERATION_RESP	defs.h	/^	MSG_OPERATION_RESP,$/;"	e	enum:__anon1
MSG_SERVER_CTRL_REQ	defs.h	/^	MSG_SERVER_CTRL_REQ,$/;"	e	enum:__anon1
MSG_SERVER_CTRL_RESP	defs.h	/^	MSG_SERVER_CTRL_RESP,$/;"	e	enum:__anon1
MSG_TYPE_MAX	defs.h	/^	MSG_TYPE_MAX,$/;"	e	enum:__anon1
OP_GET	defs.h	/^	OP_GET,$/;"	e	enum:__anon2
OP_NOOP	defs.h	/^	OP_NOOP,$/;"	e	enum:__anon2
OP_PUT	defs.h	/^	OP_PUT,$/;"	e	enum:__anon2
OP_STATUS_MAX	defs.h	/^	OP_STATUS_MAX$/;"	e	enum:__anon3
OP_TYPE_CHECK	client.c	81;"	d	file:
OP_TYPE_GET	client.c	77;"	d	file:
OP_TYPE_MAX	defs.h	/^	OP_TYPE_MAX$/;"	e	enum:__anon2
OP_TYPE_NOOP	client.c	76;"	d	file:
OP_TYPE_PUT	client.c	78;"	d	file:
OUT_OF_SPACE	defs.h	/^	OUT_OF_SPACE,\/\/ not enough memory to store an item$/;"	e	enum:__anon3
ROTATE_LEFT	md5.h	56;"	d
S11	md5.c	28;"	d	file:
S12	md5.c	29;"	d	file:
S13	md5.c	30;"	d	file:
S14	md5.c	31;"	d	file:
S21	md5.c	32;"	d	file:
S22	md5.c	33;"	d	file:
S23	md5.c	34;"	d	file:
S24	md5.c	35;"	d	file:
S31	md5.c	36;"	d	file:
S32	md5.c	37;"	d	file:
S33	md5.c	38;"	d	file:
S34	md5.c	39;"	d	file:
S41	md5.c	40;"	d	file:
S42	md5.c	41;"	d	file:
S43	md5.c	42;"	d	file:
S44	md5.c	43;"	d	file:
SERVER_CTRLREQ_STATUS_MAX	defs.h	/^	SERVER_CTRLREQ_STATUS_MAX$/;"	e	enum:__anon6
SERVER_CTRLREQ_TYPE_MAX	defs.h	/^	SERVER_CTRLREQ_TYPE_MAX$/;"	e	enum:__anon5
SERVER_EXE	Makefile	/^SERVER_EXE = server$/;"	m
SERVER_FAILURE	defs.h	/^	SERVER_FAILURE,$/;"	e	enum:__anon3
SERVER_SRC	Makefile	/^SERVER_SRC = server.c util.c hash.c$/;"	m
SET_SECONDARY	defs.h	/^	SET_SECONDARY,$/;"	e	enum:__anon5
SHUTDOWN	defs.h	/^	SHUTDOWN,\/\/ for gracefully terminating the servers$/;"	e	enum:__anon5
SUCCESS	defs.h	/^	SUCCESS,$/;"	e	enum:__anon3
SWITCH_PRIMARY	defs.h	/^	SWITCH_PRIMARY,$/;"	e	enum:__anon5
TARGETS	Makefile	/^TARGETS = CLIENT MSERVER SERVER$/;"	m
UPDATED_PRIMARY	defs.h	/^	UPDATED_PRIMARY,$/;"	e	enum:__anon4
UPDATED_SECONDARY	defs.h	/^	UPDATED_SECONDARY,$/;"	e	enum:__anon4
UPDATE_PRIMARY	defs.h	/^	UPDATE_PRIMARY,$/;"	e	enum:__anon5
UPDATE_PRIMARY_FAILED	defs.h	/^	UPDATE_PRIMARY_FAILED,$/;"	e	enum:__anon4
UPDATE_SECONDARY	defs.h	/^	UPDATE_SECONDARY,$/;"	e	enum:__anon5
UPDATE_SECONDARY_FAILED	defs.h	/^	UPDATE_SECONDARY_FAILED,$/;"	e	enum:__anon4
_DEFS_H_	defs.h	24;"	d
_DLIST_H_	dlist.h	22;"	d
_GNU_SOURCE	util.c	23;"	d	file:
_HASH_H_	hash.h	22;"	d
_UTIL_H_	util.h	24;"	d
_dlist_entry	dlist.h	/^typedef struct _dlist_entry {$/;"	s
_hash_bucket	hash.h	/^typedef struct _hash_bucket {$/;"	s
_hash_entry	hash.h	/^typedef struct _hash_entry {$/;"	s
_hash_table	hash.h	/^typedef struct _hash_table {$/;"	s
_locate_request	defs.h	/^typedef struct _locate_request {$/;"	s
_locate_response	defs.h	/^typedef struct _locate_response {$/;"	s
_mserver_ctrl_request	defs.h	/^typedef struct _mserver_ctrl_request {$/;"	s
_msg_hdr	defs.h	/^typedef struct _msg_hdr {$/;"	s
_operation	client.c	/^typedef struct _operation {$/;"	s	file:
_operation_request	defs.h	/^typedef struct _operation_request {$/;"	s
_operation_response	defs.h	/^typedef struct _operation_response {$/;"	s
_result	client.c	/^typedef struct _result {$/;"	s	file:
_server_ctrl_request	defs.h	/^typedef struct _server_ctrl_request {$/;"	s
_server_ctrl_response	defs.h	/^typedef struct _server_ctrl_response {$/;"	s
_server_node	mserver.c	/^typedef struct _server_node {$/;"	s	file:
_waitpid_args	util.c	/^typedef struct _waitpid_args {$/;"	s	file:
accept_connection	util.c	/^int accept_connection(int fd, int *fd_table, int fd_table_size)$/;"	f
bits	md5.h	/^	md5_size bits;$/;"	m	struct:md5_ctx
buckets	hash.h	/^	hash_bucket *buckets;$/;"	m	struct:_hash_table
buf	md5.h	/^	unsigned char *buf;$/;"	m	struct:md5_ctx
cfg_file_name	mserver.c	/^static char cfg_file_name[PATH_MAX] = "";$/;"	v	file:
check_operation_result	client.c	/^static bool check_operation_result(const operation *op, const result *res, bool interactive)$/;"	f	file:
clean_iterator_f	server.c	/^static void clean_iterator_f(const char key[KEY_SIZE], void *value, size_t value_sz, void *arg)$/;"	f	file:
cleanup	mserver.c	/^static void cleanup()$/;"	f	file:
cleanup	server.c	/^static void cleanup()$/;"	f	file:
client_fd_table	mserver.c	/^static int client_fd_table[MAX_CLIENT_SESSIONS];$/;"	v	file:
client_fd_table	server.c	/^static int client_fd_table[MAX_CLIENT_SESSIONS];$/;"	v	file:
clients_fd	mserver.c	/^static int clients_fd = -1;$/;"	v	file:
clients_port	mserver.c	/^static uint16_t clients_port = 0;$/;"	v	file:
clients_port	server.c	/^static uint16_t clients_port = 0;$/;"	v	file:
close_safe	util.c	/^bool close_safe(int *fd)$/;"	f
connect_to_server	util.c	/^int connect_to_server(const char *host_name, uint16_t port)$/;"	f
container_of	dlist.h	46;"	d
count	client.c	/^	int count;$/;"	m	struct:_operation	file:
cport	mserver.c	/^	uint16_t cport;$/;"	m	struct:_server_node	file:
create_server	util.c	/^int create_server(uint16_t port, int max_sessions, uint16_t *new_port)$/;"	f
current_time_str	util.c	/^char *current_time_str()$/;"	f
default_server_timeout	mserver.c	/^static const int default_server_timeout = 5;$/;"	v	file:
dlist	dlist.h	/^typedef dlist_entry dlist;$/;"	t
dlist_entry	dlist.h	/^} dlist_entry;$/;"	t	typeref:struct:_dlist_entry
dlist_init	dlist.h	/^static inline void dlist_init(dlist *list)$/;"	f
dlist_insert_after	dlist.h	/^static inline void dlist_insert_after(dlist_entry *place, dlist_entry *entry)$/;"	f
dlist_insert_before	dlist.h	/^static inline void dlist_insert_before(dlist_entry *place, dlist_entry *entry)$/;"	f
dlist_insert_head	dlist.h	/^static inline void dlist_insert_head(dlist *list, dlist_entry *entry)$/;"	f
dlist_insert_tail	dlist.h	/^static inline void dlist_insert_tail(dlist *list, dlist_entry *entry)$/;"	f
dlist_is_empty	dlist.h	/^static inline bool dlist_is_empty(const dlist *list)$/;"	f
dlist_remove_entry	dlist.h	/^static inline dlist_entry *dlist_remove_entry(dlist_entry *entry)$/;"	f
dlist_remove_head	dlist.h	/^static inline dlist_entry *dlist_remove_head(dlist *list)$/;"	f
dlist_remove_tail	dlist.h	/^static inline dlist_entry *dlist_remove_tail(dlist *list)$/;"	f
entries	hash.h	/^	dlist entries;$/;"	m	struct:_hash_bucket
equals_f	hash.c	/^static bool equals_f(const char key1[KEY_SIZE], const char key2[KEY_SIZE])$/;"	f	file:
execute_operation	client.c	/^static bool execute_operation(const operation *op, result *res)$/;"	f	file:
execute_operation_retry	client.c	/^static bool execute_operation_retry(const operation *op, result *res, int attempts)$/;"	f	file:
execute_operations	client.c	/^static bool execute_operations(FILE *input)$/;"	f	file:
free_cmd	mserver.c	/^static void free_cmd(char **cmd)$/;"	f	file:
get_entry	hash.c	/^static hash_entry *get_entry(const hash_bucket *bucket, const char key[KEY_SIZE])$/;"	f	file:
get_index	hash.c	/^static size_t get_index(const hash_table *table, const char key[KEY_SIZE])$/;"	f	file:
get_key_server	client.c	/^static int get_key_server(const char key[KEY_SIZE])$/;"	f	file:
get_local_host_name	util.c	/^int get_local_host_name(char *str, size_t length)$/;"	f
get_op_type	client.c	/^static op_type get_op_type(char type)$/;"	f	file:
get_peer_info	util.c	/^int get_peer_info(int fd, char *str, size_t length)$/;"	f
get_spawn_cmd	mserver.c	/^static char **get_spawn_cmd(int sid)$/;"	f	file:
hash_bucket	hash.h	/^} hash_bucket;$/;"	t	typeref:struct:_hash_bucket
hash_cleanup	hash.c	/^void hash_cleanup(hash_table *table)$/;"	f
hash_entry	hash.h	/^} hash_entry;$/;"	t	typeref:struct:_hash_entry
hash_f	hash.c	/^static size_t hash_f(const char key[KEY_SIZE], size_t size)$/;"	f	file:
hash_get	hash.c	/^bool hash_get(hash_table *table, const char key[KEY_SIZE], void **value, size_t *value_sz)$/;"	f
hash_init	hash.c	/^bool hash_init(hash_table *table, size_t size)$/;"	f
hash_iterate	hash.c	/^void hash_iterate(hash_table *table, hash_iterator *iterator, void *arg)$/;"	f
hash_iterator	hash.h	/^typedef void hash_iterator(const char key[KEY_SIZE], void *value, size_t value_sz, void *arg);$/;"	t
hash_lock	hash.c	/^void hash_lock(hash_table *table, const char key[KEY_SIZE])$/;"	f
hash_put	hash.c	/^bool hash_put(hash_table *table, const char key[KEY_SIZE], void *value, size_t value_sz,$/;"	f
hash_remove	hash.c	/^bool hash_remove(hash_table *table, const char key[KEY_SIZE], void **old_value, size_t *old_value_sz)$/;"	f
hash_size	server.c	/^static const int hash_size = 65536;$/;"	v	file:
hash_table	hash.h	/^} hash_table;$/;"	t	typeref:struct:_hash_table
hash_unlock	hash.c	/^void hash_unlock(hash_table *table, const char key[KEY_SIZE])$/;"	f
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_locate_request
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_locate_response
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_mserver_ctrl_request
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_operation_request
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_operation_response
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_server_ctrl_request
hdr	defs.h	/^	msg_hdr hdr;$/;"	m	struct:_server_ctrl_response
head	dlist.h	/^		struct _dlist_entry *head;$/;"	m	union:_dlist_entry::__anon7	typeref:struct:_dlist_entry::__anon7::_dlist_entry
host_name	defs.h	/^	char host_name[];$/;"	m	struct:_locate_response
host_name	defs.h	/^	char host_name[];$/;"	m	struct:_server_ctrl_request
host_name	mserver.c	/^	char host_name[HOST_NAME_MAX];$/;"	m	struct:_server_node	file:
hton_locate_request	util.c	/^static void hton_locate_request(locate_request *msg)$/;"	f	file:
hton_locate_response	util.c	/^static void hton_locate_response(locate_response *msg)$/;"	f	file:
hton_mserver_ctrl_request	util.c	/^static void hton_mserver_ctrl_request(mserver_ctrl_request *msg)$/;"	f	file:
hton_msg_hdr	util.c	/^static void hton_msg_hdr(msg_hdr *hdr)$/;"	f	file:
hton_operation_request	util.c	/^static void hton_operation_request(operation_request *msg)$/;"	f	file:
hton_operation_response	util.c	/^static void hton_operation_response(operation_response *msg)$/;"	f	file:
hton_server_ctrl_request	util.c	/^static void hton_server_ctrl_request(server_ctrl_request *msg)$/;"	f	file:
hton_server_ctrl_response	util.c	/^static void hton_server_ctrl_response(server_ctrl_response *msg)$/;"	f	file:
index	client.c	/^	int index;\/\/ corresponds to line number in the operation file$/;"	m	struct:_operation	file:
init_mserver	mserver.c	/^static bool init_mserver()$/;"	f	file:
init_server	server.c	/^static bool init_server()$/;"	f	file:
init_servers	mserver.c	/^static bool init_servers()$/;"	f	file:
key	client.c	/^	char key[MAX_STR_LEN];$/;"	m	struct:_operation	file:
key	defs.h	/^	char key[KEY_SIZE];$/;"	m	struct:_locate_request
key	defs.h	/^	char key[KEY_SIZE];$/;"	m	struct:_operation_request
key	hash.h	/^	char key[KEY_SIZE];$/;"	m	struct:_hash_entry
key_server_id	util.c	/^int key_server_id(const char key[KEY_SIZE], int num_servers)$/;"	f
key_to_str	util.h	60;"	d
key_to_str_buffer	util.c	/^char *key_to_str_buffer(const char key[KEY_SIZE], char *buffer, size_t length)$/;"	f
kill_safe	util.c	/^bool kill_safe(pid_t *pid, int timeout)$/;"	f
length	defs.h	/^	uint16_t length;$/;"	m	struct:_msg_hdr
list_entry	hash.h	/^	dlist_entry list_entry;$/;"	m	struct:_hash_entry
locate_request	defs.h	/^} __attribute__((packed)) locate_request;$/;"	t	typeref:struct:_locate_request
locate_response	defs.h	/^} __attribute__((packed)) locate_response;$/;"	t	typeref:struct:_locate_response
lock	hash.h	/^	pthread_mutex_t lock;$/;"	m	struct:_hash_bucket
log_error	util.h	46;"	d
log_file	util.c	/^static FILE *log_file = NULL;$/;"	v	file:
log_file_name	client.c	/^static char log_file_name[PATH_MAX] = "";$/;"	v	file:
log_file_name	mserver.c	/^static char log_file_name[PATH_MAX] = "";$/;"	v	file:
log_file_name	server.c	/^static char log_file_name[PATH_MAX] = "";$/;"	v	file:
log_flush	util.c	/^void log_flush()$/;"	f
log_msg	util.c	/^void log_msg(const void *msg, bool received)$/;"	f
log_perror	util.c	/^void log_perror(const char *function)$/;"	f
log_write	util.c	/^void log_write(const char *format, ...)$/;"	f
magic	defs.h	/^	char magic;$/;"	m	struct:_msg_hdr
main	client.c	/^int main(int argc, char **argv)$/;"	f
main	mserver.c	/^int main(int argc, char **argv)$/;"	f
main	server.c	/^int main(int argc, char **argv)$/;"	f
max	util.h	99;"	d
max_attempts	client.c	/^static const int max_attempts = 10;$/;"	v	file:
max_cmd_length	mserver.c	/^static const int max_cmd_length = 32;$/;"	v	file:
max_failed_ops	client.c	/^static const int max_failed_ops = 2;$/;"	v	file:
md5	md5.c	/^unsigned char *md5 (unsigned char *M, md5_size len, unsigned char *_digest) {$/;"	f
md5_addsize	md5.c	/^static void md5_addsize (unsigned char *M, md5_size index, md5_size oldlen) {$/;"	f	file:
md5_ctx	md5.h	/^struct md5_ctx {$/;"	s
md5_encode	md5.c	/^static void md5_encode (unsigned char *buffer, struct md5_ctx *context) {$/;"	f	file:
md5_final	md5.c	/^void md5_final (unsigned char *digest, struct md5_ctx *context) {$/;"	f
md5_init	md5.c	/^void md5_init (struct md5_ctx *context) {$/;"	f
md5_memcopy	md5.c	/^static void md5_memcopy (unsigned char *dest, unsigned char *src, unsigned int count) {$/;"	f	file:
md5_memset	md5.c	/^static void md5_memset (unsigned char *p, const unsigned char c, const unsigned int count) {$/;"	f	file:
md5_size	md5.h	/^typedef unsigned int md5_size;$/;"	t
md5_update	md5.c	/^void md5_update (struct md5_ctx *context) {$/;"	f
md5sum	md5.c	/^unsigned char* md5sum(const unsigned char *chaine, size_t len) {$/;"	f
memcopy	md5.c	46;"	d	file:
memset	md5.c	47;"	d	file:
mport	mserver.c	/^	uint16_t mport;$/;"	m	struct:_server_node	file:
mserver_ctrl_request	defs.h	/^} __attribute__((packed)) mserver_ctrl_request;$/;"	t	typeref:struct:_mserver_ctrl_request
mserver_ctrlreq_type	defs.h	/^} __attribute__((packed)) mserver_ctrlreq_type;$/;"	t	typeref:enum:__anon4
mserver_ctrlreq_type_str	defs.h	/^static const char *mserver_ctrlreq_type_str[MSERVER_CTRLREQ_TYPE_MAX] = {$/;"	v
mserver_fd_in	server.c	/^static int mserver_fd_in = -1;$/;"	v	file:
mserver_fd_out	server.c	/^static int mserver_fd_out = -1;$/;"	v	file:
mserver_host_name	client.c	/^static char mserver_host_name[HOST_NAME_MAX] = "";$/;"	v	file:
mserver_host_name	mserver.c	/^static char mserver_host_name[HOST_NAME_MAX] = "";$/;"	v	file:
mserver_host_name	server.c	/^static char mserver_host_name[HOST_NAME_MAX] = "";$/;"	v	file:
mserver_port	client.c	/^static uint16_t mserver_port = 0;$/;"	v	file:
mserver_port	server.c	/^static uint16_t mserver_port = 0;$/;"	v	file:
mservers_port	server.c	/^static uint16_t mservers_port = 0;$/;"	v	file:
msg_hdr	defs.h	/^} __attribute__((packed)) msg_hdr;$/;"	t	typeref:struct:_msg_hdr
msg_type	defs.h	/^} __attribute__((packed)) msg_type;$/;"	t	typeref:enum:__anon1
msg_type_str	defs.h	/^static const char *msg_type_str[MSG_TYPE_MAX] = {$/;"	v
my_clients_fd	server.c	/^static int my_clients_fd = -1;$/;"	v	file:
my_mservers_fd	server.c	/^static int my_mservers_fd = -1;$/;"	v	file:
my_servers_fd	server.c	/^static int my_servers_fd = -1;$/;"	v	file:
next	dlist.h	/^		struct _dlist_entry *next;$/;"	m	union:_dlist_entry::__anon7	typeref:struct:_dlist_entry::__anon7::_dlist_entry
ntoh_locate_request	util.c	/^static bool ntoh_locate_request(locate_request *msg)$/;"	f	file:
ntoh_locate_response	util.c	/^static bool ntoh_locate_response(locate_response *msg)$/;"	f	file:
ntoh_mserver_ctrl_request	util.c	/^static bool ntoh_mserver_ctrl_request(mserver_ctrl_request *msg)$/;"	f	file:
ntoh_msg_hdr	util.c	/^static bool ntoh_msg_hdr(msg_hdr *hdr)$/;"	f	file:
ntoh_operation_request	util.c	/^static bool ntoh_operation_request(operation_request *msg)$/;"	f	file:
ntoh_operation_response	util.c	/^static bool ntoh_operation_response(operation_response *msg)$/;"	f	file:
ntoh_server_ctrl_request	util.c	/^static bool ntoh_server_ctrl_request(server_ctrl_request *msg)$/;"	f	file:
ntoh_server_ctrl_response	util.c	/^static bool ntoh_server_ctrl_response(server_ctrl_response *msg)$/;"	f	file:
num_servers	mserver.c	/^static int num_servers = 0;$/;"	v	file:
num_servers	server.c	/^static int num_servers = 0;$/;"	v	file:
op_status	defs.h	/^} __attribute__((packed)) op_status;$/;"	t	typeref:enum:__anon3
op_status_str	defs.h	/^static const char *op_status_str[OP_STATUS_MAX] = {$/;"	v
op_type	defs.h	/^} __attribute__((packed)) op_type;$/;"	t	typeref:enum:__anon2
op_type_str	defs.h	/^static const char *op_type_str[OP_TYPE_MAX] = {$/;"	v
open_log	util.c	/^void open_log(const char *file_name)$/;"	f
operation	client.c	/^} operation;$/;"	t	typeref:struct:_operation	file:
operation_request	defs.h	/^} __attribute__((packed)) operation_request;$/;"	t	typeref:struct:_operation_request
operation_response	defs.h	/^} __attribute__((packed)) operation_response;$/;"	t	typeref:struct:_operation_response
ops_file_name	client.c	/^static char ops_file_name[PATH_MAX] = "";$/;"	v	file:
parse_args	client.c	/^static bool parse_args(int argc, char **argv)$/;"	f	file:
parse_args	mserver.c	/^static bool parse_args(int argc, char **argv)$/;"	f	file:
parse_args	server.c	/^static bool parse_args(int argc, char **argv)$/;"	f	file:
parse_operation	client.c	/^static bool parse_operation(const char *str, operation *op)$/;"	f	file:
pid	mserver.c	/^	pid_t pid;$/;"	m	struct:_server_node	file:
pid	util.c	/^	pid_t pid;$/;"	m	struct:_waitpid_args	file:
port	defs.h	/^	uint16_t port;$/;"	m	struct:_locate_response
port	defs.h	/^	uint16_t port;$/;"	m	struct:_server_ctrl_request
prev	dlist.h	/^		struct _dlist_entry *prev;$/;"	m	union:_dlist_entry::__anon8	typeref:struct:_dlist_entry::__anon8::_dlist_entry
primary_fd	server.c	/^static int primary_fd = -1;$/;"	v	file:
primary_hash	server.c	/^hash_table primary_hash = {0};$/;"	v
primary_server_id	util.c	/^int primary_server_id(int server_id, int num_servers)$/;"	f
primary_sid	server.c	/^static int primary_sid = -1;$/;"	v	file:
process_client_message	mserver.c	/^static void process_client_message(int fd)$/;"	f	file:
process_client_message	server.c	/^static void process_client_message(int fd)$/;"	f	file:
process_mserver_message	server.c	/^static bool process_mserver_message(int fd, bool *shutdown_requested)$/;"	f	file:
process_server_message	mserver.c	/^static bool process_server_message(int fd)$/;"	f	file:
process_server_message	server.c	/^static bool process_server_message(int fd)$/;"	f	file:
prompt	client.c	/^static void prompt(FILE *input)$/;"	f	file:
put_new_entry	hash.c	/^static hash_entry *put_new_entry(hash_bucket *bucket, const char key[KEY_SIZE], void *value, size_t value_sz)$/;"	f	file:
read_config_file	mserver.c	/^static bool read_config_file()$/;"	f	file:
read_whole	util.c	/^ssize_t read_whole(int fd, void *buffer, size_t length)$/;"	f
recv_msg	util.c	/^bool recv_msg(int fd, void *buffer, size_t length, msg_type expected_type)$/;"	f
regs	md5.h	/^	} regs;$/;"	m	struct:md5_ctx	typeref:struct:md5_ctx::__anon9
remote_path	mserver.c	/^static const char *remote_path = "csc469_a3\/";$/;"	v	file:
remove_entry	hash.c	/^static void remove_entry(hash_entry *entry, void **old_value, size_t *old_value_sz)$/;"	f	file:
report_operation_failure	client.c	/^static void report_operation_failure(int index, op_status status)$/;"	f	file:
result	client.c	/^} result;$/;"	t	typeref:struct:_result	file:
retry_interval	client.c	/^static const int retry_interval = 1;$/;"	v	file:
run_mserver_loop	mserver.c	/^static bool run_mserver_loop()$/;"	f	file:
run_server_loop	server.c	/^static bool run_server_loop()$/;"	f	file:
secondary_fd	server.c	/^static int secondary_fd = -1;$/;"	v	file:
secondary_server_id	util.c	/^int secondary_server_id(int server_id, int num_servers)$/;"	f
secondary_sid	server.c	/^static int secondary_sid = -1;$/;"	v	file:
select_timeout_interval	mserver.c	/^static const int select_timeout_interval = 1;\/\/ seconds$/;"	v	file:
send_msg	util.c	/^bool send_msg(int fd, void *buffer, size_t length)$/;"	f
send_operation	client.c	/^static bool send_operation(int server_fd, const char key[KEY_SIZE], const operation* op, result* res)$/;"	f	file:
send_set_secondary	mserver.c	/^static bool send_set_secondary(int sid)$/;"	f	file:
server_ctrl_request	defs.h	/^} __attribute__((packed)) server_ctrl_request;$/;"	t	typeref:struct:_server_ctrl_request
server_ctrl_response	defs.h	/^} __attribute__((packed)) server_ctrl_response;$/;"	t	typeref:struct:_server_ctrl_response
server_ctrlreq_status	defs.h	/^} __attribute__((packed)) server_ctrlreq_status;$/;"	t	typeref:enum:__anon6
server_ctrlreq_status_str	defs.h	/^static const char *server_ctrlreq_status_str[SERVER_CTRLREQ_STATUS_MAX] = {$/;"	v
server_ctrlreq_type	defs.h	/^} __attribute__((packed)) server_ctrlreq_type;$/;"	t	typeref:enum:__anon5
server_ctrlreq_type_str	defs.h	/^static const char *server_ctrlreq_type_str[SERVER_CTRLREQ_TYPE_MAX] = {$/;"	v
server_fd_table	server.c	/^static int server_fd_table[MAX_SERVER_SESSIONS] = { -1, -1 };$/;"	v	file:
server_id	defs.h	/^	uint16_t server_id;$/;"	m	struct:_mserver_ctrl_request
server_id	server.c	/^static int server_id = -1;$/;"	v	file:
server_node	mserver.c	/^} server_node;$/;"	t	typeref:struct:_server_node	file:
server_nodes	mserver.c	/^static server_node *server_nodes = NULL;$/;"	v	file:
server_timeout	mserver.c	/^static int server_timeout = 0;$/;"	v	file:
servers_fd	mserver.c	/^static int servers_fd = -1;$/;"	v	file:
servers_port	mserver.c	/^static uint16_t servers_port = 0;$/;"	v	file:
servers_port	server.c	/^static uint16_t servers_port = 0;$/;"	v	file:
sid	mserver.c	/^	int sid;$/;"	m	struct:_server_node	file:
size	hash.h	/^	size_t size;$/;"	m	struct:_hash_table
size	md5.h	/^	md5_size size;$/;"	m	struct:md5_ctx
socket_fd_in	mserver.c	/^	int socket_fd_in;$/;"	m	struct:_server_node	file:
socket_fd_out	mserver.c	/^	int socket_fd_out;$/;"	m	struct:_server_node	file:
spawn_server	mserver.c	/^static int spawn_server(int sid)$/;"	f	file:
sport	mserver.c	/^	uint16_t sport;$/;"	m	struct:_server_node	file:
status	client.c	/^	op_status status;$/;"	m	struct:_result	file:
status	defs.h	/^	op_status status;$/;"	m	struct:_operation_response
status	defs.h	/^	server_ctrlreq_status status;$/;"	m	struct:_server_ctrl_response
status	util.c	/^	int *status;$/;"	m	struct:_waitpid_args	file:
tail	dlist.h	/^		struct _dlist_entry *tail;$/;"	m	union:_dlist_entry::__anon8	typeref:struct:_dlist_entry::__anon8::_dlist_entry
type	client.c	/^	char type;\/\/ noop\/get\/put\/check$/;"	m	struct:_operation	file:
type	defs.h	/^	mserver_ctrlreq_type type;$/;"	m	struct:_mserver_ctrl_request
type	defs.h	/^	msg_type type;$/;"	m	struct:_msg_hdr
type	defs.h	/^	op_type type;$/;"	m	struct:_operation_request
type	defs.h	/^	server_ctrlreq_type type;$/;"	m	struct:_server_ctrl_request
update_entry	hash.c	/^static void update_entry(hash_entry *entry, void *value, size_t value_sz, void **old_value, size_t *old_value_sz)$/;"	f	file:
usage	client.c	/^static void usage(char **argv)$/;"	f	file:
usage	mserver.c	/^static void usage(char **argv)$/;"	f	file:
usage	server.c	/^static void usage(char **argv)$/;"	f	file:
value	client.c	/^	char value[MAX_STR_LEN];$/;"	m	struct:_operation	file:
value	client.c	/^	char value[MAX_STR_LEN];$/;"	m	struct:_result	file:
value	defs.h	/^	char value[];$/;"	m	struct:_operation_request
value	defs.h	/^	char value[];$/;"	m	struct:_operation_response
value	hash.h	/^	void *value;\/\/ must be != NULL$/;"	m	struct:_hash_entry
value_sz	hash.h	/^	size_t value_sz;$/;"	m	struct:_hash_entry
wait_or_kill	util.c	/^bool wait_or_kill(pid_t pid, int timeout)$/;"	f
waitpid_args	util.c	/^} waitpid_args;$/;"	t	typeref:struct:_waitpid_args	file:
waitpid_timeout	util.c	/^pid_t waitpid_timeout(pid_t pid, int *status, int timeout)$/;"	f
waitpid_timeout_thread_f	util.c	/^static void *waitpid_timeout_thread_f(void *arg)$/;"	f	file:
